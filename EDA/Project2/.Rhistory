image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
par(mfrow = c(1, 3),mar=c(5,5,5,2))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
image(1:40,1:10,t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
par(mfrow = c(1, 3),mar=c(5,5,5,2))
image(1:10, 1:40, t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
rowMeans(dataMatrix)
rowMeans(dataMatrixOrdered)
colMeans(dataMatrixOrdered)
rownames(dataMatrixOrdered)
dataMatrixOrdered
plot(1:40,rowMeans(dataMatrixOrdered))
plot(rowMeans(dataMatrixOrdered),1:40,)
plot(rowMeans(dataMatrixOrdered),1:40,)
par(mfrow = c(1,1))
plot(rowMeans(dataMatrixOrdered),1:40,)
hh$order
dataMatrixOrdered <- dataMatrix[hh$order, ]
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered),40:1)
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
rm(list=ls())
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered),40:1)
image(t(dataMatrixOrdered)
)
)
image(t(dataMatrixOrdered))
image(t(dataMatrixOrdered))
image(t(dataMatrixOrdered))[40:1]
image(t(dataMatrixOrdered))[,10:1]
image(t(dataMatrixOrdered))[,10:1]
image(t(dataMatrixOrdered))[,10:1]
image(t(dataMatrixOrdered))[,40:1]
image(t(dataMatrixOrdered))[,40:1]
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
image(dataMatrixOrdered)
image(t(dataMatrixOrdered))
image(t(dataMatrixOrdered))
image(dataMatrixOrdered)
dataMatrixOrdered
par(mfrow = c(1,1))
image(dataMatrixOrdered)
par(mfrow = c(1,1),mar=c(5,5,5,1))
image(dataMatrixOrdered)
t(dataMatrixOrdered)
image(t(dataMatrixOrdered))
image(1:40,1:10,t(dataMatrixOrdered))
image(1:10,1:40,t(dataMatrixOrdered))
plot(1:40,rowMeans(dataMatrixOrdered))
plot(1:10,colMeans(dataMatrixOrdered))
hh$order
hh$merge
hh$height
hh$labels
hh$method
hh$dist.method
sd(1,2,3,4,5)
sd(c(1,2,3,4,5))
-----------i
insta
ls()
dataMatrixOrdered
heatmap(dataMatrix)
head(dataMatrix)
dataMatrix<-round(dataMatrix,2)
dataMatrix
dist(dataMatrix)
round(dist(dataMatrix),2)
round(dist(dataMatrix),2)
round(dist(t(dataMatrix)),2)
sapply(dataMatrix[,1],sqrt()
)
sapply(dataMatrix[,1],sqrt)
sapply(dataMatrix[,1],function(x) sum(sqrt(x))
)
sapply(dataMatrix[,1],function(x) sqrt(x))
dataMatrix[,1]
mod(-.59)
-.11*-.11
dataMatrix<-as.numeric(dataMatrix)
sapply(dataMatrix[,1],function(x) sqrt(x))
dataMatrix
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
dataMatrix
sapply(dataMatrix,as.numeric)
as.numeric(dataMatrix)
colnames(dataMatrix)
apply(dataMatrix,2,as.numeric)
dataMatrix<-apply(dataMatrix,2,as.numeric)
dataMatrix
dataMatrix<-round(dataMatrix,2)
dataMatrix
sapply(dataMatrix[,1],sqrt)
.59*.59
apply(dataMatrix[,1],2,sqrt)
apply(dataMatrix,2,sqrt)
apply(dataMatrix,2,function(x) x^2)
temp<-apply(dataMatrix,2,function(x) x^2)
apply(temp,2,sum)
apply(temp,1,sum)
apply(temp[,1],2,sum)
sapply(temp[,1],sum(x)
)
sapply(temp[,1],sum)
colSums(temp)
dist(t(dataMatrix))
sqrt(colSums(temp))
temp
dataMatrix
temp<-t(dataMatrix)
temp
for(i in 1:40){
dist<-temp[1,i]-temp[2,i]
}
for(i in 1:40){
dist<-(temp[1,i]-temp[2,i])^2
}
a<-0
for(i in 1:40){
dist<-(temp[1,i]-temp[2,i])^2
a<-a+dist
}
a
sqrt(a)
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4),mar=c(5,5,5,5))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
dataMatrix
coinFlip <- rbinom(1, size = 1, prob = 0.5)
coinFlip
coinFlip <- rbinom(1, size = 1, prob = 0.5)
coinFlip
dataMatrix
dataMatrix[1, ] <- dataMatrix[1, ] + rep(c(0, 3), each = 5)
dataMatrix
rep(c(0, 3), each = 5)
rm(list=ls()
)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
dataMatrix<-data.frame(1:40,1:10)
dataMatrix
dataMatrix<-data.frame()
dataMatrix
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
dataMatrix<-data.frame(matrix(nrow = 40,ncol = 10))
dataMatrix
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
dataMatrix
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
return dataMatrix}
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
return dataMatrix
for (i in 1:40) {
+     # flip a coin
+     coinFlip <- rbinom(1, size = 1, prob = 0.5)set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
}
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
dataMatrix
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
return dataMatrix
}
rm(list-ls())
rm(list=ls())
set.seed(678910)
dataMatrix<-data.frame(matrix(nrow = 40,ncol = 10))
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
dataMatrix
set.seed(678910)
dataMatrix<-data.frame(matrix(nrow = 40,ncol = 10))
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
print(coinFlip)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
set.seed(678910)
dataMatrix<-data.frame(matrix(nrow = 40,ncol = 10))
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
print(coinFlip)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
print (dataMatrix)
}
}
set.seed(678910)
dataMatrix<-data.frame(matrix(nrow = 5,ncol = 10))
for (i in 1:5) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
print(coinFlip)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
print (dataMatrix)
}
}
NA+5
which(NA)+5
set.seed(678910)
dataMatrix<-data.frame(matrix(nrow = 5,ncol = 10))
for (i in 1:5) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
print(coinFlip)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- which(dataMatrix[i, ]) + rep(c(0, 3), each = 5)
print (dataMatrix)
}
}
set.seed(678910)
dataMatrix<-data.frame(matrix(nrow = 5,ncol = 10))
for (i in 1:5) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
print(coinFlip)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- which(dataMatrix[i, ] + rep(c(0, 3), each = 5))
print (dataMatrix)
}
}
dataMatrix
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
dataMatrix
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4),mar=c(3,3,3,3))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
dist(dataMatrix)
round(dist(dataMatrix),2)
round(dist(dataMatrix),2)
round(dist(dataMatrix),2)
set.seed(12345)
dataMatrix<-matrix(rnorm(400),nrow=40
)
heatmap(dataMatrix)
set.seed(678910)
for(i in 1:40){
coinFlip<-rbinom(1,size=1,prob=0.5)
if(coinFlip){
dataMatrix[i,]<-dataMatrix{i,] +rep(c(0,3),each=5)
for(i in 1:40){
coinFlip<-rbinom(1,size=1,prob=0.5)
if(coinFlip){
dataMatrix[i,]<-dataMatrix[i,] +rep(c(0,3),each=5)
}
}
dataMatrix
heatmap(dataMatrix)
hh<-hclust(dist(dataMatrix))
dataMatrixOrdered<-dataMatrix[hh$order,]
dataMatrix
dataMatrixOrdered
svd1<-svd(scale(dataMatrixOrdered))
svd1
plot(rnorm(10),rnorm(10))
plot(rnorm(10),rnorm(10),col=1)
plot(rnorm(10),rnorm(10),col=2)
plot(rnorm(10),rnorm(10),col=3)
setwd("Documents/Courses/EDA/Project2/")
if (!exists("NEI")) {
NEI <- readRDS("summarySCC_PM25.rds")
NEI <- transform(NEI, fips = factor(fips), SCC = factor(SCC),
Pollutant = factor(Pollutant),
type = factor(type),
year = factor(year))
}
head(NEI)
summary<-readRDS("summarySCC_PM25.rds")
tons_per_year <- with(NEI, tapply(Emissions, year, sum))
tons_per_year
plotData<-ddply(summary,.variables = 'year',numcolwise(sum))
library(plyr)
plotData<-ddply(summary,.variables = 'year',numcolwise(sum))
plotData
with(plotData,{
plot(year,Emissions,xlab="year",ylab="Emissions",main = "Total PM2.5 Emissions in the US", type='n')
lines(year,Emissions,col="red")
})
png("plot1.png",width=480,height=480,units='px')
with(plotData,{
plot(year,Emissions,xlab="year",ylab="Emissions",main = "Total PM2.5 Emissions in the US", type='n')
lines(year,Emissions,col="red")
})
dev.off()
dev.off()
if (!exists("NEI")) {
NEI <<- readRDS("summarySCC_PM25.rds")
NEI <<- transform(NEI, fips = factor(fips), SCC = factor(SCC),
Pollutant = factor(Pollutant),
type = factor(type),
year = factor(year))
}
if (!exists("SCC")) {
SCC <<- readRDS("Source_Classification_Code.rds")
}
# build a list of source names for coal combustion-related sources
coal_sources <- with(SCC, SCC[grep("coal", Short.Name, ignore.case=TRUE)])
# identify rows in the summary table for these sources
coal_rows <- NEI$SCC %in% coal_sources
coal_data <- NEI[coal_rows,]
head(coal_data)
qplot(year, Emissions, data=coal_data, geom="bar", stat="identity",
xlab = "Year", ylab = "Emissions (thousands of tons)",
main = expression(paste("PM"[2.5], " Emissions from Coal Combustion-Related Sources"))) +
scale_y_continuous(labels = function(x) {x/1000})
library(gglot2)
library(ggplot2)
qplot(year, Emissions, data=coal_data, geom="bar", stat="identity",
xlab = "Year", ylab = "Emissions (thousands of tons)",
main = expression(paste("PM"[2.5], " Emissions from Coal Combustion-Related Sources"))) +
scale_y_continuous(labels = function(x) {x/1000})
counties_of_interest <- list("24510"="Baltimore City", "06037"="Los Angeles County")
counties_of_interest
head(NEI)
ss <- split(NEI,NEI$year)
ns <- names(ss)
sum1 <- vector()
for(i in 1:length(ns)){
d1 <- NEI[NEI$year == ns[i],]
sum1[i] <- sum(d1$Emissions)
}
plot(ns,sum1, xlab = "year", ylab = "total PM25", pch = 19)
total.by.year = with(NEI, aggregate(Emissions ~ year, FUN = sum))
head(total.by.year)
fit = with (total.by.year, lm(Emissions ~ year))
fit
?lm
plot_title = "1 - Annual Particulate Emission"
filename = paste(plot_title,".png",sep="")
filename
png(filename=filename)
