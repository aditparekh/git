image(dataMatrixOrdered)
image(t(dataMatrixOrdered))
image(t(dataMatrixOrdered))
image(dataMatrixOrdered)
dataMatrixOrdered
par(mfrow = c(1,1))
image(dataMatrixOrdered)
par(mfrow = c(1,1),mar=c(5,5,5,1))
image(dataMatrixOrdered)
t(dataMatrixOrdered)
image(t(dataMatrixOrdered))
image(1:40,1:10,t(dataMatrixOrdered))
image(1:10,1:40,t(dataMatrixOrdered))
plot(1:40,rowMeans(dataMatrixOrdered))
plot(1:10,colMeans(dataMatrixOrdered))
hh$order
hh$merge
hh$height
hh$labels
hh$method
hh$dist.method
sd(1,2,3,4,5)
sd(c(1,2,3,4,5))
-----------i
insta
ls()
dataMatrixOrdered
heatmap(dataMatrix)
head(dataMatrix)
dataMatrix<-round(dataMatrix,2)
dataMatrix
dist(dataMatrix)
round(dist(dataMatrix),2)
round(dist(dataMatrix),2)
round(dist(t(dataMatrix)),2)
sapply(dataMatrix[,1],sqrt()
)
sapply(dataMatrix[,1],sqrt)
sapply(dataMatrix[,1],function(x) sum(sqrt(x))
)
sapply(dataMatrix[,1],function(x) sqrt(x))
dataMatrix[,1]
mod(-.59)
-.11*-.11
dataMatrix<-as.numeric(dataMatrix)
sapply(dataMatrix[,1],function(x) sqrt(x))
dataMatrix
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
dataMatrix
sapply(dataMatrix,as.numeric)
as.numeric(dataMatrix)
colnames(dataMatrix)
apply(dataMatrix,2,as.numeric)
dataMatrix<-apply(dataMatrix,2,as.numeric)
dataMatrix
dataMatrix<-round(dataMatrix,2)
dataMatrix
sapply(dataMatrix[,1],sqrt)
.59*.59
apply(dataMatrix[,1],2,sqrt)
apply(dataMatrix,2,sqrt)
apply(dataMatrix,2,function(x) x^2)
temp<-apply(dataMatrix,2,function(x) x^2)
apply(temp,2,sum)
apply(temp,1,sum)
apply(temp[,1],2,sum)
sapply(temp[,1],sum(x)
)
sapply(temp[,1],sum)
colSums(temp)
dist(t(dataMatrix))
sqrt(colSums(temp))
temp
dataMatrix
temp<-t(dataMatrix)
temp
for(i in 1:40){
dist<-temp[1,i]-temp[2,i]
}
for(i in 1:40){
dist<-(temp[1,i]-temp[2,i])^2
}
a<-0
for(i in 1:40){
dist<-(temp[1,i]-temp[2,i])^2
a<-a+dist
}
a
sqrt(a)
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4),mar=c(5,5,5,5))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
dataMatrix
coinFlip <- rbinom(1, size = 1, prob = 0.5)
coinFlip
coinFlip <- rbinom(1, size = 1, prob = 0.5)
coinFlip
dataMatrix
dataMatrix[1, ] <- dataMatrix[1, ] + rep(c(0, 3), each = 5)
dataMatrix
rep(c(0, 3), each = 5)
rm(list=ls()
)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
dataMatrix<-data.frame(1:40,1:10)
dataMatrix
dataMatrix<-data.frame()
dataMatrix
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
dataMatrix<-data.frame(matrix(nrow = 40,ncol = 10))
dataMatrix
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
dataMatrix
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
return dataMatrix}
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
return dataMatrix
for (i in 1:40) {
+     # flip a coin
+     coinFlip <- rbinom(1, size = 1, prob = 0.5)set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
}
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
dataMatrix
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
return dataMatrix
}
rm(list-ls())
rm(list=ls())
set.seed(678910)
dataMatrix<-data.frame(matrix(nrow = 40,ncol = 10))
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
dataMatrix
set.seed(678910)
dataMatrix<-data.frame(matrix(nrow = 40,ncol = 10))
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
print(coinFlip)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
set.seed(678910)
dataMatrix<-data.frame(matrix(nrow = 40,ncol = 10))
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
print(coinFlip)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
print (dataMatrix)
}
}
set.seed(678910)
dataMatrix<-data.frame(matrix(nrow = 5,ncol = 10))
for (i in 1:5) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
print(coinFlip)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
print (dataMatrix)
}
}
NA+5
which(NA)+5
set.seed(678910)
dataMatrix<-data.frame(matrix(nrow = 5,ncol = 10))
for (i in 1:5) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
print(coinFlip)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- which(dataMatrix[i, ]) + rep(c(0, 3), each = 5)
print (dataMatrix)
}
}
set.seed(678910)
dataMatrix<-data.frame(matrix(nrow = 5,ncol = 10))
for (i in 1:5) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
print(coinFlip)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- which(dataMatrix[i, ] + rep(c(0, 3), each = 5))
print (dataMatrix)
}
}
dataMatrix
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
dataMatrix
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4),mar=c(3,3,3,3))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
dist(dataMatrix)
round(dist(dataMatrix),2)
round(dist(dataMatrix),2)
round(dist(dataMatrix),2)
set.seed(12345)
dataMatrix<-matrix(rnorm(400),nrow=40
)
heatmap(dataMatrix)
set.seed(678910)
for(i in 1:40){
coinFlip<-rbinom(1,size=1,prob=0.5)
if(coinFlip){
dataMatrix[i,]<-dataMatrix{i,] +rep(c(0,3),each=5)
for(i in 1:40){
coinFlip<-rbinom(1,size=1,prob=0.5)
if(coinFlip){
dataMatrix[i,]<-dataMatrix[i,] +rep(c(0,3),each=5)
}
}
dataMatrix
heatmap(dataMatrix)
hh<-hclust(dist(dataMatrix))
dataMatrixOrdered<-dataMatrix[hh$order,]
dataMatrix
dataMatrixOrdered
svd1<-svd(scale(dataMatrixOrdered))
svd1
setwd("Documents/Courses/EDA/")
pm0<-read.table("RD_501_88101_1999-0.txt",sep="|",header = F,comment.char = "#")
pm1<-read.table("RD_501_88101_2012-0.txt",sep="|",header = F,comment.char = "#")
head(pm1)
head(pm0)
head("RD_501_88101_1999-0.txt")
readLines("RD_501_88101_1999-0.txt,1")
readLines("RD_501_88101_1999-0.txt",1)
grep("RC",pm0$V1)
grep("RC",pm1$V1)
readLines("RD_501_88101_1999-0.txt",1)
strsplit("|",readLines(pm0),fixed = T)
strsplit("|",readLines("RD_501_88101_1999-0.txt"),fixed = T)
strsplit("RD_501_88101_1999-0.txt",split = "|",fixed = T)
strsplit(readLines("RD_501_88101_1999-0.txt"),split = "|",fixed = T)
strsplit(readLines("RD_501_88101_1999-0.txt",1),split = "|",fixed = T)
cNames0<-strsplit(readLines("RD_501_88101_1999-0.txt",1),split = "|",fixed = T)
cNames1<-strsplit(readLines("RD_501_88101_2012-0.txt",1),split = "|",fixed = T)
cNames0
colnames(pm0)<-cNames0[[1]]
colnames(pm1)<-cNames1[[1]]
head(pm0)
gsub(" ",replacement = ".",colnames(pm0))
colnames(pm1)<-make.names(colnames(pm0))
colnames(pm0)<-cNames0[[1]]
colnames(pm0)<-make.names(cNames0[[1]])
colnames(pm1)<-make.names(cNames1[[1]])
is.na(pm0)
nrow(pm0)
nrow(pm1)
object.size(pm0)
object.size(pm1)
nrow(pm1)*ncol(pm1)*8
pm0<-pmo[complete.cases(pm0),]
pm0<-pm0[complete.cases(pm0),]
pm1<-pm1[complete.cases(pm1),]
nrow(pm1)*ncol(pm1)*8
head(pm0)
pm0<-read.table("RD_501_88101_1999-0.txt",sep="|",header = F,comment.char = "#",na.strings = "")
pm1<-read.table("RD_501_88101_2012-0.txt",sep="|",header = F,comment.char = "#",na.strings = "")
colnames(pm1)<-make.names(colnames(pm1))
colnames(pm0)<-make.names(colnames(pm0))
head(pm0)
colnames(pm1)<-make.names(cNames1[[1]])
colnames(pm0)<-make.names(cNames0[[1]])
head(pm0)
nrow(pm0)
nrow(pm1)
dim(pm1)
pm1<-read.table("RD_501_88101_2012-0.txt",sep="|",header = FALSE,comment.char = "#",na.strings = "")
dim(pm1)
object.size(pm1)
summary(pm0)
object.size(pm0$Sample.Value)
summary(pm0$Sample.Value)
summary(pm1$Sample.Value)
head(pm1)
colnames(pm1)<-make.names(cNames1[[1]])
object.size(pm0$Sample.Value)
summary(pm0$Sample.Value)
summary(pm1$Sample.Value)
boxplot(pm1$Sample.Value,pm0$Sample.Value)
boxplot(log(pm1$Sample.Value),log(pm0$Sample.Value))
boxplot(log10(pm1$Sample.Value),log10(pm0$Sample.Value))
negatives<-pm1[pm1$Sample.Value<0,]
nrow(negatives)
nrow(pm1)
x0<-pm0$Sample.Value
x1<-pm1$Sample.Value
negatives<-x1<0
nrow(negatives)
negatives<-x1 < 0
negatives
str(negatives)
sum(complete.cases(negatives))
mean(complete.cases(negatives))
2245998/nrow(x1)
2245998/length(x1)
negatives<-which(x1<0)
length(negatives)
head(negatives)
negat
negatives
x1<0
sum(x1<0)
sum(x1<0,is.na=T)
sum(x1<0,is.na.rn=T)
sum(x1<0,is.na.rm=T)
sum(x1<0,is.na.rm=TRUE)
negatives<-x1<0
negatives
sum(negatives,na.rm=TRUE)
.Last.value/length(x1)
dates<-pm1$Date
str(dates)
summary(dates)
library(lubridate)
dates<-ymd(dates)
head(dates)
str(dates)
hist(dates)
hist(dates,"month")
hist(dates,break="months")
hist(dates,break="month")
hist(dates,break=month)
hist(dates,breaks = month)
hist(dates,breaks = 'month')
colnames(pm0)
head(pm0$Site.ID)
head(pm0$State.ID)
pm0$State.Code
unique(pm0$County.Code)
head(pm0)
subset(pm0,pm0$State.Code==36,select = c(pm0$County.Code,pm0$Site.ID))
subset(pm0,pm0$State.Code==36,select = c(County.Code,Site.ID))
test<-subset(pm0,pm0$State.Code==36,select = c(County.Code,Site.ID))
head(test)
unique(test)
?unique
head(test)
unique(test$Site.ID)
site0<-unique(subset(pm0,pm0$State.Code==36,select = c(County.Code,Site.ID)))
site1<-unique(subset(pm1,pm0$State.Code==36,select = c(County.Code,Site.ID)))
head(site0)
head(site1)
site0<-paste(site0[,1],site[,2],".")
site0<-paste(site0[,1],site0[,2],".")
site1<-paste(site1[,1],site1[,2],".")
head(site0)
head(site1)
site0<-unique(subset(pm0,pm0$State.Code==36,select = c(County.Code,Site.ID)))
site1<-unique(subset(pm1,pm0$State.Code==36,select = c(County.Code,Site.ID)))
site0<-paste(site0[,1],site0[,2],sep = ".")
site1<-paste(site1[,1],site1[,2],sep = ".")
head(site0)
head(site1)
interaction(site0,site1)
intersect(site0,site1)
a %in% "abc"
a %in% abc
"a" %in% "abc"
a<-"test"
b<-'t'
a %in% b
b %in% a
?rep
rep(1,10)
rep(1999,52)
mtcars
colnames(mtcars)
head(mtcars)
head(mtcars)
nrow(mtcars)
with(mtcars,plot(rep(1,32),mpg))
with(mtcars,points(rep(2,32),disp))
with(mtcars,plot(rep(1,32),mpg,xlim=c(0,3)))
with(mtcars,points(rep(2,32),disp))
with(mtcars,points(rep(2,32),qsec))
?segments
with(mtcars,plot(rep(1,32),mpg,xlim=c(0,3)))
with(mtcars,points(rep(2,32),qsec))
with(mtcars,segments(rep(1,32),mpg,rep(2,32),qsec))
